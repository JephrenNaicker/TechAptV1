@page "/threading"
@using TechAptV1.Client.Interface
@inject IThreadingService ThreadingService

<h3>Threading &amp; Data Persistence</h3>

<div>
	<button class="btn btn-primary" @onclick="Start" disabled="@_isRunning">Start</button>
	<button class="btn btn-primary" @onclick="Save" disabled="@(!_hasData|| !_isCompleted)">Save</button>

</div>
<div>
	<hr>
	<h4>Numbers:</h4>
	<ul>
		<li>Odd: <strong>@this._oddNumbers</strong></li>
		<li>Even: <strong>@this._evenNumbers</strong></li>
		<li>Prime: <strong>@this._primeNumbers</strong></li>
		<li>Total: <strong>@this._totalNumbers</strong></li>
	</ul>
	<hr>
</div>

@if (!string.IsNullOrEmpty(_saveError))
{
	<div class="alert alert-danger">
		<strong>Error:</strong> @_saveError
	</div>
}

@code {



	[Inject] public required ILogger<Threading> Logger { get; set; }

	private int _oddNumbers = 0;
	private int _evenNumbers = 0;
	private int _primeNumbers = 0;
	private int _totalNumbers = 0;

	private bool _isRunning = false;
	private bool _hasData = false;
	private bool _isCompleted = false;
	private string? _saveError = null;

	private async Task Start()
	{
		this.Logger.LogInformation("Start");

		Logger.LogInformation("Starting number generation...");
		_isRunning = true;
		await ThreadingService.Start();

		// Update numbers in real-time
		while (_isRunning)
		{
			_oddNumbers = ThreadingService.GetOddNumbers();
			_evenNumbers = ThreadingService.GetEvenNumbers();
			_primeNumbers = ThreadingService.GetPrimeNumbers();
			_totalNumbers = ThreadingService.GetTotalNumbers();
			_hasData = _totalNumbers > 0;
			_isCompleted = ThreadingService.IsGenerationComplete();
			StateHasChanged();
			await Task.Delay(500); // Refresh UI every 500ms

		}
	}

    private async Task Save()
    {
        this.Logger.LogInformation("Save");
		_saveError = null;
		try
		{
			await ThreadingService.Save();
			Logger.LogInformation("Data saved.");
		}
		catch (Exception ex)
		{
			_saveError = $"Failed to save data: {ex.Message}";
			Logger.LogError(ex, "Error saving data.");
		}
	}

}
